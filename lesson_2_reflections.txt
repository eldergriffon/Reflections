What happens when you initialize a repository? Why do you need to do it?

Durning initialization, a hidden set of folders is added to the filesystem. Git will eventually use this folder structure to store data about commits to the repository and other metadata, but it has to get set up first. These hidden folders define the repository, so it's the same as configuring it for initial use.

How is the staging area different from the working directory and the repository? What value do you think it offers?

The "staging area" allows you to group files that may have changed into a single logical commit. This makes easier to see the commit as a whole before executing it. These files may exist in the working directory, but not yet in the repository, so it is always possible to keep untracked files in the working directory with versioned files around them.

How can you use the staging area to make sure you have one commit per logical change?

Using "git status" lets you review the items in the staging are before they are committed, in order to make sure they are all part of a single logical commit. With large commits involving many files, this preview of the total contents of the commit can help you avoid missing any part of the commit, or committing too much.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?

A branch allows you pursue two separate development paths simultaneously if you choose. One of the most common of such situations is when you want to develop a new feature but continue to fix bugs in the original code without having to deal with your new feature code at the same time. The branch separates out each scenario so it can be dealt with entirely in isolation. By doing so, you can complete each new objective, make sure it is working properly and is completely done, and only then commit back to the main code. This makes the history of commits on the master branch very clean; each commit represents a full logical package, not a lot of incremental steps.

How do the diagrams help you visualize the branch structure?

Branches are related to one another by the points in history at which they diverge or converge. These points may have important implications for the work being done, but it can be hard to perceive these implications without seeing the history laid out as a tree structure. The diagrams help do this.