What happens when you initialize a repository? Why do you need to do it?

Durning initialization, a hidden set of folders is added to the filesystem. Git will eventually use this folder structure to store data about commits to the repository and other metadata, but it has to get set up first. These hidden folders define the repository, so it's the same as configuring it for initial use.

How is the staging area different from the working directory and the repository? What value do you think it offers?

The "staging area" allows you to group files that may have changed into a single logical commit. This makes easier to see the commit as a whole before executing it. These files may exist in the working directory, but not yet in the repository, so it is always possible to keep untracked files in the working directory with versioned files around them.

How can you use the staging area to make sure you have one commit per logical change?

Using "git status" lets you review the items in the staging are before they are committed, in order to make sure they are all part of a single logical commit. With large commits involving many files, this preview of the total contents of the commit can help you avoid missing any part of the commit, or committing too much.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?

A branch allows you pursue two separate development paths simultaneously if you choose. One of the most common of such situations is when you want to develop a new feature but continue to fix bugs in the original code without having to deal with your new feature code at the same time. The branch separates out each scenario so it can be dealt with entirely in isolation. By doing so, you can complete each new objective, make sure it is working properly and is completely done, and only then commit back to the main code. This makes the history of commits on the master branch very clean; each commit represents a full logical package, not a lot of incremental steps.

How do the diagrams help you visualize the branch structure?

Branches are related to one another by the points in history at which they diverge or converge. These points may have important implications for the work being done, but it can be hard to perceive these implications without seeing the history laid out as a tree structure. The diagrams help do this.

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

When two branches are merged together, all the commits from each branch become part of the history of the surviving branch. Using a heuristic, git can automatically combine the commits into one complete set of files that include all these changes. The fully history of commits, after the merge, is represented as a series of changes in chronological order. However, can be slightly misleading, as the merged commits that are chronologically close to each other may actually have nothing to do with each other logically speaking. So, in the diagram, the merge is represented as two sets of commits from each branch so that they can be viewed as separate sequences.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?

Git's ability to use general common sense rules to merge two files certainly speeds up the merge process. This can especially help when there are a lot of small changes to be merged, a tedious task for a human being and one that probably doesn't require a person's brainpower. However, it is possible, though probably unusual, for Git to merge the files inappropriately. For example, Git may conclude that since if one set of changes adds a line and another set of changes removes a completely different line, that both changes can be safely combined. But what if the added line was dependent on the line that was removed? Git cannot detect such dependencies, and so cannot know that a human is required to properly merge the changes.